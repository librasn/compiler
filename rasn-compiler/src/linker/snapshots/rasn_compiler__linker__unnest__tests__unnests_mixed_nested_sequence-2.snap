---
source: rasn-compiler/src/linker/unnest.rs
expression: test_sequence
---
Assignment::Type(
    TypeAssignment {
        comments: "",
        tag: None,
        name: "Test",
        ty: ASN1Type::Sequence(
            SequenceOrSet {
                components_of: [],
                extensible: None,
                constraints: [],
                members: [
                    SequenceOrSetMember {
                        name: "m0",
                        tag: None,
                        ty: ASN1Type::ElsewhereDeclaredType(
                            DeclarationElsewhere {
                                parent: None,
                                identifier: DefinedType::TypeReference(
                                    "test-module.Test.m0",
                                ),
                                constraints: [],
                            },
                        ),
                        optionality: Required,
                        is_recursive: false,
                        constraints: [],
                    },
                    SequenceOrSetMember {
                        name: "m1",
                        tag: None,
                        ty: ASN1Type::ElsewhereDeclaredType(
                            DeclarationElsewhere {
                                parent: None,
                                identifier: DefinedType::TypeReference(
                                    "test-module.Test.m1",
                                ),
                                constraints: [],
                            },
                        ),
                        optionality: Required,
                        is_recursive: false,
                        constraints: [],
                    },
                    SequenceOrSetMember {
                        name: "m2",
                        tag: None,
                        ty: ASN1Type::ElsewhereDeclaredType(
                            DeclarationElsewhere {
                                parent: None,
                                identifier: DefinedType::TypeReference(
                                    "test-module.Test.m2",
                                ),
                                constraints: [],
                            },
                        ),
                        optionality: Required,
                        is_recursive: false,
                        constraints: [],
                    },
                ],
            },
        ),
        parameterization: None,
        module_header: None,
    },
)
